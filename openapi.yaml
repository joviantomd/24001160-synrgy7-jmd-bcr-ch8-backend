openapi: 3.0.3
info:
  title: API binar rental cars
  description: API to manage binar rental cars application
  version: 1.0.0
servers:
  - url : localhost:3000
    description: Local server
paths:
  /user/login:
    post:
      summary: Login Account
      tags: 
        - User
      requestBody:
        description: Login User
        required: True
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/InputUser'
      responses:
        '201':
          description: Login User successfuly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseLogin'
  /user/register:
    post:
      summary: Register User
      tags: 
        - User
      requestBody:
        description: Register Account User
        required: True
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/RegisterUser'
      responses:
        '201':
          description: Account created successfuly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseRegisterUser'
  
  /cars/available:
    get:
      summary: Get List Available Cars
      tags: 
        - Cars
      responses:
        '200':
          description: List Available Cars
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/AvailableCars'
                  
  /cars/all:
    get:
      summary: Get List All Cars
      tags: 
        - Cars
      responses:
        '200':
          description: List All Cars
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OK
                  cars:
                    type: array
                    items:
                      $ref: '#/components/schemas/AllCars'
        '401':
          description: Unauthorized, no valid token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Unauthorized"
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Forbidden"
                  message:
                    type: string
                    example: "Access Denied"
  
  /cars/create:
    post:
      summary: Create a new car
      tags: 
        - Cars
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestCreateCar'
      responses:
        '201':
          description: Data successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: OK
                  message:
                    type: string
                    example: Data successfully created!
                  data:
                    $ref: '#/components/schemas/CreateCar'
        
        '401':
          description: Unauthorized, no valid token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Unauthorized"
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Forbidden"
                  message:
                    type: string
                    example: "Access Denied"
                    
  /cars/{id} :
    get:
      summary: Get Cars by ID
      tags: 
        - Cars
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Get car details by ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  car:
                    $ref: '#/components/schemas/GetCarbyId'
                    
        '401':
          description: Unauthorized, no valid token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Unauthorized"
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Forbidden"
                  message:
                    type: string
                    example: "Access Denied"
        
    put:
      summary: Update Cars by ID
      tags: 
        - Cars
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarUpdateRequest'
      responses:
        '200':
          description: Car successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Data berhasil di update!"
                    
        '401':
          description: Unauthorized, no valid token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Unauthorized"
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Forbidden"
                  message:
                    type: string
                    example: "Access Denied"
                  
    delete:
      summary: Delete Cars by ID
      tags: 
        - Cars
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Item successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "OK"
                  message:
                    type: string
                    example: "Item successfully deleted"
                    
        '401':
          description: Unauthorized, no valid token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Unauthorized"
                  message:
                    type: string
                    example: "Unauthorized"
        '403':
          description: Access Denied
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Forbidden"
                  message:
                    type: string
                    example: "Access Denied"
  
  /whoami :
    get:
      summary: Get the current logged-in user's information
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current logged-in user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 777
                  name:
                    type: string
                    example: member
                  role:
                    type: string
                    example: user
                  email:
                    type: string
                    example: user@user.com

        '401':
          description: Unauthorized, no valid token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Unauthorized"
        

    
components:
  schemas:
    #Login User
    InputUser:
      type: object
      properties:
        email: 
          type: string
          example: "user@user.com"
        password: 
          type: string
          example: "user1234"
    
    ResponseLogin:
      type: object
      properties:
        id: 
          type: number
          example: 777
        email:
          type: string
          example: user@user.com
        token: 
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6Nzc3LCJlbWFpbCI6InVzZXJAdXNlci5jb20iLCJpYXQiOjE3MTczMjg2Mzd9.X5pOtz0N4HeUg7q4bY-PIsSXIvPqWJ9LUbV-M7M5Cvg
        
    #Register User
    RegisterUser:
      type: object
      properties:
        name: 
          type: string
          example: "user"
        email: 
          type: string
          example: "user@user.com"
        password: 
          type: string
          example: "user1234"
    
    ResponseRegisterUser:
      type: object
      properties:
        id: 
          type: number
          example: "1"
        name: 
          type: string
          example: "user1"
        email: 
          type: string
          example: "user1@user.com"
        password: 
          type: string
          example: "user1234"
        role: 
          type: string
          example: "user"
    
    #AvailableCars
    AvailableCars:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 888
        name:
          type: string
          example: "Toyota Supra"
        price:
          type: string
          example: "3500000000"
        category:
          type: string
          example: small
        image:
          type: string
          example: "https://res.cloudinary.com/dsozzm34s/image/upload/v1716114632/ch-5-challenge/Practice_Challenge_5_1_wtdcmx.png"
        start_date:
          type: string
          format: date-time
          example: "2024-02-15T16:00:00.000Z"
        end_date:
          type: string
          format: date-time
          example: "2024-09-14T16:00:00.000Z"
        availability:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2024-06-02T11:04:25.136Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-06-02T11:04:25.136Z"
        createdBy:
          type: string
          example: "admin"
        updatedBy:
          type: string
          example: "admin"
    
    
    #AllCars
    AllCars:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 888
        name:
          type: string
          example: "Toyota Supra"
        price:
          type: string
          example: "3500000000"
        category:
          type: string
          example: small
        image:
          type: string
          example: "https://res.cloudinary.com/dsozzm34s/image/upload/v1716114632/ch-5-challenge/Practice_Challenge_5_1_wtdcmx.png"
        start_date:
          type: string
          format: date-time
          example: "2024-02-15T16:00:00.000Z"
        end_date:
          type: string
          format: date-time
          example: "2024-09-14T16:00:00.000Z"
        availability:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: "2024-06-02T11:04:25.136Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-06-02T11:04:25.136Z"
        createdBy:
          type: string
          example: "admin"
        updatedBy:
          type: string
          example: "admin"
    
    
    #Create Cars
    RequestCreateCar:
      type: object
      required:
          - name
          - price
          - category
          - image
          - start_date
          - end_date
          - availability  
      properties:
          name:
            type: string
            example: "Porsche 911"
          price:
            type: string
            example: "123456"
          category:
            type: string
            example: "small"
          image:
            type: string
            example: "https://example.com/car.jpg" # Optional field if you want to include an image
          start_date:
            type: string
            format: date
            example: "2024/02/16"
          end_date:
            type: string
            format: date
            example: "2024/02/16"
          availability:
            type: boolean
            example: true
          
    
    CreateCar:
      type: object
      properties:
          id:
            type: integer
            example: 6
          name:
            type: string
            example: "Porsche 911"
          price:
            type: string
            example: "123456"
          category:
            type: string
            example: small
          image:
            type: string
            example: "https://res.cloudinary.com/dsozzm34s/image/upload/v1717326397/ch-5-challenge/hn2j95v1ntn0j4fllgkz.jpg"
          start_date:
            type: string
            format: date
            example: "2024/02/16"
          end_date:
            type: string
            format: date
            example: "2024/02/16"
          availability:
            type: boolean
            example: true
          createdAt:
            type: string
            format: date-time
            example: "2024-06-02T11:06:37.823Z"
          updatedAt:
            type: string
            format: date-time
            example: "2024-06-02T11:06:37.823Z"
          user_id:
            type: integer
            example: 999
          createdBy:
            type: string
            example: "superadmin"
          updatedBy:
            type: string
            nullable: true
            example: null
            
    # #Get Cars by ID
    GetCarbyId:
      type: object
      properties:
        id:
          type: integer
          example: 2
        user_id:
          type: integer
          example: 999
        name:
          type: string
          example: "Skyline GTR"
        price:
          type: string
          example: "1000000000"
        category:
          type: string
          example: "small"
        image:
          type: string
          example: "https://res.cloudinary.com/dsozzm34s/image/upload/v1716114854/ch-5-challenge/skylineGTR_mppl75.jpg"
        start_date:
          type: string
          format: date-time
          example: "2024-02-15T16:00:00.000Z"
        end_date:
          type: string
          format: date-time
          example: "2024-02-15T16:00:00.000Z"
        availability:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: "2024-06-02T11:04:25.136Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-06-02T11:04:25.136Z"
        createdBy:
          type: string
          example: "admin"
        updatedBy:
          type: string
          example: "admin"
          
    # #Update Cars by ID
    CarUpdateRequest:
      type: object
      required:
        - name
        - price
        - category
        - start_date
        - end_date
        - image
        - availability
      properties:
        name:
          type: string
          example: "Skyline GTR"
        price:
          type: integer
          example: 2500000000
        category:
          type: string
          example: "small"
        start_date:
          type: string
          format: date
          example: "2024-02-16"
        end_date:
          type: string
          format: date
          example: "2024-02-16"
        image:
          type: string
          example: "https://res.cloudinary.com/dsozzm34s/image/upload/v1716114854/ch-5-challenge/skylineGTR_mppl75.jpg"
        availability:
          type: boolean
          example: true
    
    